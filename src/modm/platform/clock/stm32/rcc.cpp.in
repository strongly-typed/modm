/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, Fabian Greif
 * Copyright (c) 2011, Georgi Grinshpun
 * Copyright (c) 2012, 2016, Sascha Schade
 * Copyright (c) 2012, 2014-2019, Niklas Hauser
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2018, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "rcc.hpp"

// CMSIS Core compliance
uint32_t modm_fastdata SystemCoreClock({{ "{0:,}".format((1000000 * hsi_frequency)|int).replace(',', "'") }});
modm_weak void SystemCoreClockUpdate() { /* Nothing to update */ }

namespace modm::platform
{
uint16_t modm_fastdata delay_fcpu_MHz({{ hsi_frequency }});
uint16_t modm_fastdata delay_ns_per_loop({{ "{0:,}".format((loops * 1000.0 / hsi_frequency)|int).replace(',', "'") }});
}

// ----------------------------------------------------------------------------
%% if target["family"] == "f0"
bool
modm::platform::Rcc::enableInternalClockMHz14(uint32_t waitCycles)
{
	bool retval;
	RCC->CR2 |= RCC_CR2_HSI14ON;
	while (not (retval = (RCC->CR2 & RCC_CR2_HSI14RDY)) and --waitCycles)
		;
	return retval;
}
%% endif

%% if hsi48
bool
modm::platform::Rcc::enableInternalClockMHz48(uint32_t waitCycles)
{
	bool retval;
	RCC->CR2 |= RCC_CR2_HSI48ON;
	while (not (retval = (RCC->CR2 & RCC_CR2_HSI48RDY)) and --waitCycles)
		;
	return retval;
}
%% endif

bool
modm::platform::Rcc::enableInternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->CR |= RCC_CR_HSION;
	while (not (retval = (RCC->CR & RCC_CR_HSIRDY)) and --waitCycles)
		;
	return retval;
}

%% if target["family"] in ["l1", "l4"]
bool
modm::platform::Rcc::enableMultiSpeedInternalClock(MsiFrequency msi_frequency, uint32_t waitCycles)
{
	bool retval;
%% if target["family"] in ["l1"]
	RCC->ICSCR = (RCC->ICSCR & ~RCC_ICSCR_MSIRANGE) | static_cast<uint32_t>(msi_frequency);
	RCC->CR |= RCC_CR_MSION;
	while (not (retval = (RCC->CR & RCC_CR_MSIRDY)) and --waitCycles)
%% else
	RCC->CR = (RCC->CR & ~RCC_CR_MSIRANGE) | static_cast<uint32_t>(msi_frequency) | RCC_CR_MSIRGSEL | RCC_CR_MSION;
	while (not (retval = (RCC->CR & RCC_CR_MSIRDY)) and --waitCycles)
%% endif
		;
	return retval;
}
%% endif

bool
modm::platform::Rcc::enableExternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
	while (not (retval = (RCC->CR & RCC_CR_HSERDY)) and --waitCycles)
		;
	return retval;
}

bool
modm::platform::Rcc::enableExternalCrystal(uint32_t waitCycles)
{
	bool retval;
	RCC->CR = (RCC->CR & ~RCC_CR_HSEBYP) | RCC_CR_HSEON;
	while (not (retval = (RCC->CR & RCC_CR_HSERDY)) and --waitCycles)
		;
	return retval;
}

bool
modm::platform::Rcc::enableLowSpeedInternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->CSR |= RCC_CSR_LSION;
	while (not (retval = (RCC->CSR & RCC_CSR_LSIRDY)) and --waitCycles)
		;
	return retval;
}

bool
modm::platform::Rcc::enableLowSpeedExternalClock(uint32_t waitCycles)
{
	bool retval;
%% if target["family"] in ["l1"]
	RCC->CSR |= RCC_CSR_LSEBYP | RCC_CSR_LSEON;
	while (not (retval = (RCC->CSR & RCC_CSR_LSERDY)) and --waitCycles)
%% else
	RCC->BDCR |= RCC_BDCR_LSEBYP | RCC_BDCR_LSEON;
	while (not (retval = (RCC->BDCR & RCC_BDCR_LSERDY)) and --waitCycles)
%% endif
		;
	return retval;
}

bool
modm::platform::Rcc::enableLowSpeedExternalCrystal(uint32_t waitCycles)
{
	bool retval;
%% if target["family"] in ["l1"]
	RCC->CSR = (RCC->CSR & ~RCC_CSR_LSEBYP) | RCC_CSR_LSEON;
	while (not (retval = (RCC->CSR & RCC_CSR_LSERDY)) and --waitCycles)
%% else
	RCC->BDCR = (RCC->BDCR & ~RCC_BDCR_LSEBYP) | RCC_BDCR_LSEON;
	while (not (retval = (RCC->BDCR & RCC_BDCR_LSERDY)) and --waitCycles)
%% endif
		;
	return retval;
}

bool
modm::platform::Rcc::enablePll(PllSource source, const PllFactors& pllFactors, uint32_t waitCycles)
{
%% if target["family"] in ["h7"]
	// Read reserved values and clear all other values
	uint32_t srctmp = RCC->PLLCKSELR & ~(RCC_PLLCKSELR_PLLSRC);
	// PLLSRC source for pll and for plli2s
	srctmp |= static_cast<uint32_t>(source);

	RCC->PLLCKSELR = srctmp;

	uint32_t divtmp = RCC->PLL1DIVR & ~(RCC_PLL1DIVR_R1
			| RCC_PLL1DIVR_Q1 | RCC_PLL1DIVR_P1 | RCC_PLL1DIVR_N1);

	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	divtmp |= (((uint32_t) pllFactors.pll1DivR1) << RCC_PLL1DIVR_R1_Pos) & RCC_PLL1DIVR_R1;

	// PLLN (6) = factor is user defined
	divtmp |= (((uint32_t) pllFactors.pll1DivQ1) << RCC_PLL1DIVR_Q1_Pos) & RCC_PLL1DIVR_Q1;

	// PLLP (16) divider for CPU frequency; (00: PLLP = 2, 01: PLLP = 4, etc.)
	divtmp |= (((uint32_t) pllFactors.pll1DivP1) << RCC_PLL1DIVR_P1_Pos) & RCC_PLL1DIVR_P1;

	divtmp |= (((uint32_t) pllFactors.pll1DivN1) << RCC_PLL1DIVR_N1_Pos) & RCC_PLL1DIVR_N1;

	RCC->PLL1DIVR = divtmp;

	// enable pll
	RCC->CR |= RCC_CR_PLL1ON;

	uint32_t tmp;
	while (not (tmp = (RCC->CR & RCC_CR_PLL1RDY)) and --waitCycles)
		;

	return tmp;

%% elif target["family"] in ["f2", "f4", "f7"]
	// Read reserved values and clear all other values
	uint32_t tmp = RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP);

	// PLLSRC source for pll and for plli2s
	tmp |= static_cast<uint32_t>(source);

	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllFactors.pllM) & RCC_PLLCFGR_PLLM;

	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllFactors.pllN) << RCC_PLLCFGR_PLLN_Pos) & RCC_PLLCFGR_PLLN;

	// PLLP (16) divider for CPU frequency; (00: PLLP = 2, 01: PLLP = 4, etc.)
	tmp |= (((uint32_t) (pllFactors.pllP / 2) - 1) << RCC_PLLCFGR_PLLP_Pos) & RCC_PLLCFGR_PLLP;

	// PLLQ (24) divider for USB frequency; (0-15)
	if (pllFactors.pllQ != 0xff) {
		tmp &= ~RCC_PLLCFGR_PLLQ;
		tmp |= (((uint32_t) pllFactors.pllQ) << RCC_PLLCFGR_PLLQ_Pos) & RCC_PLLCFGR_PLLQ;
	}

	RCC->PLLCFGR = tmp;

	// enable pll
	RCC->CR |= RCC_CR_PLLON;

	while (not (tmp = (RCC->CR & RCC_CR_PLLRDY)) and --waitCycles)
		;

	return tmp;

%% elif target["family"] in ["g0", "l4", "g4"]

	// Read reserved values and clear all other values
	uint32_t tmp = RCC->PLLCFGR & ~(
			RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN |
%% if pll_p
			// RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLP |
%% endif
			RCC_PLLCFGR_PLLREN | RCC_PLLCFGR_PLLR);

	// PLLSRC source for pll
	tmp |= static_cast<uint32_t>(source);

	// PLLM factor is user defined VCO input frequency must be configured between 4MHz and 16Mhz
	tmp |= (uint32_t(pllFactors.pllM - 1) << RCC_PLLCFGR_PLLM_Pos) & RCC_PLLCFGR_PLLM;

	// PLLN factor is user defined: between 64 and 344 MHz
	tmp |= (uint32_t(pllFactors.pllN) << RCC_PLLCFGR_PLLN_Pos) & RCC_PLLCFGR_PLLN;

	// PLLR divider for CPU frequency
%% if target["family"] in ["g0"]
	tmp |= ((uint32_t(pllFactors.pllR) - 1) << RCC_PLLCFGR_PLLR_Pos) & RCC_PLLCFGR_PLLR;
	// PLLP divider for P frequency
	// tmp |= ((uint32_t(pllP) - 1) << RCC_PLLCFGR_PLLP_Pos) & RCC_PLLCFGR_PLLP;
%% else
	tmp |= ((uint32_t(pllFactors.pllR / 2) - 1) << RCC_PLLCFGR_PLLR_Pos) & RCC_PLLCFGR_PLLR;
	// PLLQ (21) divider for USB frequency; (00: PLLQ = 2, 01: PLLQ = 4, etc.)
	if (pllFactors.pllQ != 0xff) {
		tmp &= ~RCC_PLLCFGR_PLLQ;
		tmp |= (((uint32_t) (pllFactors.pllQ / 2) - 1) << RCC_PLLCFGR_PLLQ_Pos) & RCC_PLLCFGR_PLLQ;
		// enable pll USB clock output
		tmp |= RCC_PLLCFGR_PLLQEN;
	}
%% endif

	// enable pll CPU clock output
	tmp |= RCC_PLLCFGR_PLLREN;

	RCC->PLLCFGR = tmp;

	// enable pll
	RCC->CR |= RCC_CR_PLLON;

	while (not (tmp = (RCC->CR & RCC_CR_PLLRDY)) and --waitCycles)
		;

	return tmp;

%% elif target["family"] in ["l1"]

	uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_PLLMUL | RCC_CFGR_PLLSRC | RCC_CFGR_PLLDIV);
	// PLLSRC source for pll
	tmp |= static_cast<uint32_t>(source);
	// Pll multiplication factor
	tmp |= static_cast<uint32_t>(pllFactors.pllMul);
	tmp |= (static_cast<uint32_t>(pllFactors.pllDiv - 1) << RCC_CFGR_PLLDIV_Pos) & RCC_CFGR_PLLDIV;
	RCC->CFGR = tmp;

	// enable pll
	RCC->CR |= RCC_CR_PLLON;
	while (not (tmp = (RCC->CR & RCC_CR_PLLRDY)) and --waitCycles)
		;

	return tmp;


%% else

%% set pullmul = 'RCC_CFGR_PLLMULL' if target["family"] == "f1" else 'RCC_CFGR_PLLMUL'
	// Read reserved values and clear all other values
%% if usbprescaler
	uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_USBPRE | {{pullmul}} | RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE);

	// Divide Output for USB Clock by 1.5?
	tmp |= static_cast<uint32_t>(pllFactors.usbPrediv);
%% else
	uint32_t tmp = RCC->CFGR & ~({{pullmul}} | RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE);
%% endif

	// PLLSRC source for pll
	tmp |= static_cast<uint32_t>(source);

	// Pll multiplication factor
	tmp |= (static_cast<uint32_t>(pllFactors.pllMul - 2) << 18) & {{pullmul}};

%% if pllprediv
	%% set mask = 'RCC_CFGR2_PREDIV1' if target["family"] == "f1" else 'RCC_CFGR2_PREDIV'
#ifdef {{mask}}
	// HSE PREDIV division factor
	RCC->CFGR2 = (RCC->CFGR2 & ~({{mask}})) | (uint32_t(pllFactors.pllPrediv - 1) & {{mask}});
#else
	if (uint32_t(pllFactors.pllPrediv - 1) & 0x1) tmp |= RCC_CFGR_PLLXTPRE;
#endif
%% endif
	RCC->CFGR = tmp;
%% if pllprediv2
	RCC->CFGR2 = (RCC->CFGR2 & ~(RCC_CFGR2_PREDIV2)) | ((uint32_t(pllFactors.pllPrediv2 - 1) << 4) & RCC_CFGR2_PREDIV2);
%% endif
	// enable pll
	RCC->CR |= RCC_CR_PLLON;

	while (not (tmp = (RCC->CR & RCC_CR_PLLRDY)) and --waitCycles)
		;

	return tmp;
%%endif
}

// ----------------------------------------------------------------------------
bool
modm::platform::Rcc::enableSystemClock(SystemClockSource src, uint32_t waitCycles)
{
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_SW) | uint32_t(src);

	// Wait till the main PLL is used as system clock source
	src = SystemClockSource(uint32_t(src) << 2);
	while ((RCC->CFGR & RCC_CFGR_SWS) != uint32_t(src))
	{
		if (not --waitCycles)
			return false;
	}

	return true;
}
